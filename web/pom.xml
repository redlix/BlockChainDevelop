<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>BlockChainDevelop</artifactId>
        <groupId>com.nwnu</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <artifactId>web</artifactId>
    <groupId>com.nwnu.blockchain</groupId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>web</name>
    <description>Demo project for Spring Boot</description>

    <dependencies>
        <dependency>
            <groupId>com.nwnu</groupId>
            <artifactId>BlockChainDevelop-p2p</artifactId>
            <version>1.0-SNAPSHOT</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>RELEASE</version>
            <scope>test</scope>
        </dependency>
        <!--        <dependency>-->
<!--            <groupId>org.junit.jupiter</groupId>-->
<!--            <artifactId>junit-jupiter</artifactId>-->
<!--            <version>RELEASE</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->
    </dependencies>
    <!--多模块打包：只需在启动类所在模块的POM文件：指定打包插件 -->
    <build>
        <plugins>
            <plugin>
                <!--该插件主要用途：构建可执行的JAR -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--使用docker-maven-plugin插件-->
            <plugin>
                            <groupId>com.spotify</groupId>
                            <artifactId>docker-maven-plugin</artifactId>
                            <version>1.0.0</version>

                            <!--将插件绑定在某个phase执行-->
                            <executions>
                                <execution>
                                    <id>build-image</id>
                                    <!--将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build-->
                                    <phase>package</phase>
                                    <goals>
                                        <goal>build</goal>
                                    </goals>
                                </execution>
                            </executions>

                            <configuration>
                                <!--指定生成的镜像名-->
                                <imageName>block/${project.artifactId}</imageName>
                                <!--指定标签-->
                                <imageTags>
                                    <imageTag>latest</imageTag>
                                </imageTags>
                                <!-- 指定 Dockerfile 路径-->
                                <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>

                                <!--指定远程 docker api地址-->
<!--                                <dockerHost>http://202.201.48.69:2375</dockerHost>-->
                                <dockerHost>unix:///var/run/docker.sock</dockerHost>

                                <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                                <resources>
                                    <resource>
                                        <targetPath>/</targetPath>
                                        <!--jar 包所在的路径  此处配置的 即对应 target 目录-->
                                        <directory>${project.build.directory}</directory>
                                        <!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                                        <include>${project.build.finalName}.jar</include>
                                    </resource>
                                </resources>
                            </configuration>
                        </plugin>
        </plugins>
    </build>
</project>
